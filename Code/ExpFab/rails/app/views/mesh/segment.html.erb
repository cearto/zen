<script> 
// MODEL DATA
var pca = <%= @pca %>;
var regions = <%= @seg %>;
var invRegions = invert(regions);
var operationData = <%= @operations %>;

$(function(){
	initOpenGL($('#scene'), {
    "success" : function(){},
    "error" : function(){}
  });
});	


function userRay(event){
	var c = $(renderer.domElement);
	var vector  = toCanvasCoord(event).setZ(0.5);
	projector.unprojectVector( vector, camera );
	return new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize());
}

function inputEvent(event){
  if(event.objfn == null) event.objfn = function(regid){};
  if(event.axesfn == null) event.axesfn = function(regid, axesfn){};
  if(event.mainfn == null) event.mainfn = function(){};

  event.preventDefault();
  controls.enabled = !(event.metaKey);
  if(!(event.altKey || event.metaKey)) { gui = $('.region').mouseleave(); return; };

  var ray = userRay(event);
  var all = scene.children;
  cones  = [], objects = [];

  for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
  for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);
  var selected = {'objects' : ray.intersectObjects(objects), 'axes' : ray.intersectObjects(cones)};

  if(activeAxis != null){
    var regid = selectedRegions2(mainExpFab)[0];
    event.mainfn(event, regid);
  }

  if(selected.axes.length > 0){
    var regid = selectedRegions2(mainExpFab)[0];
    var pcaid = parseInt(selected.axes[0].object.name);
    event.axesfn(regid, pcaid);
  }
  
  if ( selected.objects.length > 0 ) {
      var regid = invRegions[selected.objects[0].faceIndex];
      event.objfn(regid);
  }
  render();
}

function onDocumentMouseClick(event) {
  event.objfn = function(regid){ $('.region[data-r="'+ regid +'"]').click(); };
	var selected = inputEvent(event);
}

function onDocumentOver(event){
  event.objfn =  function(regid){
    gui = $('.region[data-r="'+ regid +'"]').mouseenter();
    $('.region').not(gui).mouseleave();
  };

  event.mainfn = function(event, regid){
    cl(activeRegion);
    current = toCanvasCoord(event);
    var origin = mainExpFab.regions[regid].centroid.clone();
    var displacement = current.clone().subVectors(current, origin);
    var originaldisplacement = down.clone().subVectors(down, origin);
    var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
    activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));
    var scale = (displacement.length() - originaldisplacement.length());
    cl("S:" + (scale * 5));
    $(".op-slider[name='"+ currentOperation +"']").val(larger * scale * (1/displacement.length()) * 5).change();
  };

  var selected = inputEvent(event);

}

function onDocumentMouseDown(event) {
  event.axesfn = function(regid, pcaid){
    activeRegion = mainExpFab.regions[regid];
    activeAxis = activeRegion.pca_lines[pcaid];
    activeRegion.params.axis = activeRegion.pca[pcaid];
    cl(activeRegion);
    activeDataStream = datastreams[0];
    activeDataStream.saveState();

    activeAxis.click();
    down = toCanvasCoord(event);
  };
  var selected = inputEvent(event);
}

function onDocumentMouseUp(event) {

  event.axesfn = function(regid, pcaid){ mainExpFab.regions[regid].pca_lines[pcaid].click();};
  var selected = inputEvent(event);

 
  event.mainfn = function(event, regid){
    up = toCanvasCoord(event);
    current = toCanvasCoord(event);

    var origin = mainExpFab.regions[regid].centroid.clone();
    var displacement = current.clone().subVectors(current, origin);
    
    var originaldisplacement = down.clone().subVectors(down, origin);
    var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
    activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));

    down = up;
  }
  activeAxis = null;
}	

</script>

<div class="pure-g-r content" id="layout">
    <div class="pure-u" id="nav"></div>

    <div class="pure-u-1" id="main">
        <div class="mesh-content">
            
            <div id='gallery-wrapper' class='gallery-sidebar'>
              
              <div id='gallery' ></div>
              
              <div id='gallery-controls'>
                <button id='screenshot'>Screenshot</button>
                <button id='fullscreen'>Fullscreen</button>
                <button id='save'>Export STL</button>
              </div>
            </div>

            <div id="scene" class="mesh-content-body"></div>
        </div>
    </div>
</div>
 <span id="pulldown"> <%= image_tag '/icons/gear.png', :class => "shadow"%> </span>
<div id="error" class='shadow'> 
  
  <h2> We encountered an error. </h2>
  <span id='error-msg'> Error message goes here. </span>
  <span class='x'>x</span> 
</span>