<script> 
//global variables
var stats, WIDTH, HEIGHT, ASPECT, NEAR, FAR, VIEW_ANGLE;
var renderer = new THREE.WebGLRenderer({ antialias: true } );
var operationData = <%= @operations %>;
var regions = <%= @seg %>;
var pca = <%= @pca %>;
var scene = new THREE.Scene();
var camera, controls, projector;
var invRegions = invert(regions);
var Z = 300;
var zoomLevel = 0.01;
var theta = 0;
var phi = 0;
var z;

var mainExpFab;
$(function(){
	convertColors();
	initOpenGL($('#scene'));
	GUIActivateListeners();
	animate();
	$('canvas').mousemove(onDocumentOver);
	$('canvas').click(onDocumentMouseClick);
	$('canvas').mouseup(onDocumentMouseUp);
	$('canvas').mousedown(onDocumentMouseDown);
	$('#print').click(clean);
});	
function clean(){
	$('#streams').hide();
	$('#regions').hide();
}
function ExpFab(obj, regions, pca){
	this.object = obj;
	
	this.original = obj.geometry.vertices.slice(0);
	for(var i in obj.geometry.vertices)	this.original[i] = this.original[i].clone();
	
	this.current = obj.geometry.vertices.slice(0);
	for(var i in obj.geometry.vertices)	this.current[i] = this.current[i].clone();
	
	this.regions = [];
	for(var i in regions) this.regions.push(new Region(this, i, regions[i], pca[i]));
	

	this.id = scene.userData.objects.length;
}

function userRay(event){
	var c = $(renderer.domElement);
	var vector  = toCanvasCoord(event).setZ(0.5);
	projector.unprojectVector( vector, camera );
	return new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize());
}
var yaxis = new THREE.Vector3(0, 1, 0);
function onDocumentOver(event){
	event.preventDefault();
	controls.enabled = !(event.metaKey);
    if(!(event.altKey || event.metaKey)) return;
   
    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	if(activeAxis != null){
	  	current = toCanvasCoord(event);
	  	var regid = selectedRegions2(mainExpFab)[0];
	  	var origin = mainExpFab.regions[regid].centroid.clone();
	  	var displacement = current.clone().subVectors(current, origin);
	  	var originaldisplacement = down.clone().subVectors(down, origin);
  		var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
  		activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));
  		var scale = (displacement.length() - originaldisplacement.length());
  		cl("S:" + (scale * 5));

  		$(".op-slider[name='"+ currentOperation +"']").val(larger * scale * (1/displacement.length()) * 5).change();
  	}
  	if(axesintersects.length > 0){
  		render();
  		return;
  	}

    if (intersects.length > 0 ) {
    	
    	var regid = invRegions[intersects[0].faceIndex];
        gui = $('.region[data-r="'+ regid +'"]').mouseenter();
        $('.region').not(gui).mouseleave();
     }
	else	
        gui = $('.region').mouseleave();
	
	render();
	
}
function onDocumentMouseClick(event) {
	event.preventDefault();
	
	if(!(event.altKey || event.metaKey)) return;

	var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	if(axesintersects.length > 0){
  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    var regid = invRegions[intersects[0].faceIndex];
	    gui = $('.region[data-r="'+ regid +'"]').click();
		render();
	}
}
var down  = new THREE.Vector3(0, 0, 0);
var up  = new THREE.Vector3(0, 0, 0);
var current  = new THREE.Vector3(0, 0, 0);
var originalAxisLength = 1;
var zaxis = new THREE.Vector3(0, 0, 1);

var activeAxis = null;
function onDocumentMouseDown(event) {
    event.preventDefault();
    if(!(event.altKey || event.metaKey)) return;

    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);

  	if(axesintersects.length > 0){
  		var regid = selectedRegions2(mainExpFab)[0];
  		var pcaid = parseInt(axesintersects[0].object.name);
  		var activeRegion = mainExpFab.regions[regid];
  		activeAxis = activeRegion.pca_lines[pcaid];
  		activeDataStream = datastreams[0];
  		activeDataStream.saveState();
  		if(pcaid == 0)
  			currentOperation = 'Scalex';
  		else if(pcaid == 1)
  			currentOperation = 'Scaley';
  		else if(pcaid == 2)
  			currentOperation = 'Scalez';


  		activeAxis.click();
  		
  		down = toCanvasCoord(event);

  		
  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    
	}
}
function onDocumentMouseUp(event) {
    event.preventDefault();
    if(!(event.altKey || event.metaKey)) return;

    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	
  	
	up = toCanvasCoord(event);
  		  	current = toCanvasCoord(event);
	  	var regid = selectedRegions2(mainExpFab)[0];
	  	var origin = mainExpFab.regions[regid].centroid.clone();
	  	var displacement = current.clone().subVectors(current, origin);
	  	var originaldisplacement = down.clone().subVectors(down, origin);
  		var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
  		activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));
  		down = up;
  	activeAxis = null;
  	if(axesintersects.length > 0){
  		var regid = selectedRegions2(mainExpFab)[0];
  		var pcaid = parseInt(axesintersects[0].object.name);
  		mainExpFab.regions[regid].pca_lines[pcaid].click();

  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    
	}
}

	
</script>
<div class="pure-g-r content" id="layout">
    <div class="pure-u" id="nav">
        
    </div>

    <div class="pure-u" id="list"></div>

    <div class="pure-u-1" id="main">
        <div class="mesh-content">
            <div id="info-bar" class="mesh-content-header pure-g">
                <div class="pure-u-1-2">
                    <h1 class="mesh-content-title">Sphere</h1>
                    <p class="mesh-content-subtitle">
                        From <a>Cesar Torres</a> at <span>3:56pm, April 3, 2012</span>
                    </p>
                   
                </div>

                <div class="pure-u-1-2 mesh-content-controls">
                    <button id='save' class="pure-button secondary-button">Save</button>
                    <button id='revert' class="pure-button secondary-button">Revert</button>
                    <button class="pure-button secondary-button" id='print'>Print</button>
                </div>
            </div>

            <div id="scene" class="mesh-content-body">

            </div>
        </div>
    </div>
</div>
 <span id="pulldown"> <%= image_tag '/icons/gear.png', :class => "shadow"%> </span>
<style>
	.swatch-button:hover{
		-webkit-box-shadow: 1px 1px 8px rgba(50, 50, 50, 0.3);
		-moz-box-shadow:    1px 1px 8px rgba(50, 50, 50, 0.3);
		box-shadow:         1px 1px 8px rgba(50, 50, 50, 0.3);
	}
	.swatch-button.selected{
		border: #AAA 1px solid;
		margin: 0.2% 0.6% !important;
	}
	.icon-button{
		border: #AAA 1px solid;
	}
	.icon-button:hover{
		background: white;
	}
	.icon-button:active{
		background: #AAA;
	}
	#objnav, #matview{
		margin-bottom: 20px;
	}
	.ui-span{
		padding: 0 4px;

	}
	br{
		display: block;		
		margin: 10px 0;
	}
	.ui-link{
		font-size: 10pt;
		padding: 8px 8px;
		border-radius: 2px;
		color: black;

	}
	.ui-link:hover, .ui-link.selected-mat{
		background: #fff;
	}
	div.mesh-item{
		padding: 0.25em 1em;
		cursor: pointer;
	}
	div.mesh-item:hover, .selected{
		background: rgba(255,255, 255, 0.8);
	}
	.ui-heading{
		background: #333;
		color: white;
		width: 109%;
		padding: 4px 0;
		margin: -8px -8px 8px -8px;
		font-size: 8pt;
		font-weight: normal;
	}
.clearfix{
	clear: both;
}
	button.icon{
		width: 15px;
		height: 50px;
	}
	button.icon img{
		height: 100%;
	}
	/*SECONDARY*/
	#pulldown{
		position: absolute;
		width: 30px;
		display: block;
		text-align: center;
		color: black;
		top: 10px;
		margin: 0;
		left: 10px;
		font-size: 8pt;
	}
	#pulldown img{
		width: 100%;
		padding: 8px;
		background: #EEE;
		border-radius: 50px;
	}
	#pulldown img:hover{
		background: #FFF;
	}
	#pulldown img:active{
		background: #DDD;
	}
	.mesh-content-header{
		top: 0;
		left: 0;
		position: relative;
		z-index: 100;
		background: rgba(255, 255, 255, 0.9);
	}
	#scene{
		position: fixed;
		top: 0;
		left: 0;
		width: calc(100% - 320px);
		margin-left: 0;
		margin-right: 0;
		padding: 0;
	}
	#main{
		width: calc(100% - 320px);
		position: fixed;
		margin-left: 0;
		top: 0;
		right: 320px;
	}
	#nav{
		margin-left: 0;
		width: 260px;
		position: fixed;
		top: 0;
		right: 30px;
	}
	#list{
		position: fixed;
		top: 0;
		right: 260px;
		margin-left: 0;
		z-index: 200;
		background: white;
		display: none;
	}
	#list.active{
		display: block;
	}
	/*SLIDERS*/
	.slider{
		text-align: center;
		text-transform: uppercase;
		font-size: 8pt;
		color: white;
	}
	.pure-menu-button{
		margin-left: 5%;
	}
	.pure-button-secondary {
            color: white;
            border-radius: 4px;
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
        }

	.pure-button-toggle {
            background: rgb(202, 60, 60); /* this is a maroon */
     }
	/*BASE CSS*/
	html, body{
		width: 100%;
		height: 100%;
		overflow: hidden;
	}
	#main, #layout{
		height: 100%;
	}
	#container{
		width: 100%;
		height: 100%;
	}
	#info-bar{
		background: none;
		left: 5%;
		top: -20px;
		width: calc(100% - 200px);
		border: none;
	}
	/* SCENE STYLE */
	body{
		background: #adadad; /* Old browsers */
		background: -moz-linear-gradient(45deg, #adadad 0%, #d3d2d1 21%, #ffffff 46%, #f2f2ed 69%, #c4c4c0 90%, #a5a5a2 100%); /* FF3.6+ */
		background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#adadad), color-stop(21%,#d3d2d1), color-stop(46%,#ffffff), color-stop(69%,#f2f2ed), color-stop(90%,#c4c4c0), color-stop(100%,#a5a5a2)); /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(45deg, #adadad 0%,#d3d2d1 21%,#ffffff 46%,#f2f2ed 69%,#c4c4c0 90%,#a5a5a2 100%); /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(45deg, #adadad 0%,#d3d2d1 21%,#ffffff 46%,#f2f2ed 69%,#c4c4c0 90%,#a5a5a2 100%); /* Opera 11.10+ */
		background: -ms-linear-gradient(45deg, #adadad 0%,#d3d2d1 21%,#ffffff 46%,#f2f2ed 69%,#c4c4c0 90%,#a5a5a2 100%); /* IE10+ */
		background: linear-gradient(45deg, #adadad 0%,#d3d2d1 21%,#ffffff 46%,#f2f2ed 69%,#c4c4c0 90%,#a5a5a2 100%); /* W3C */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#adadad', endColorstr='#a5a5a2',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
	}
	.shadow{
		-webkit-box-shadow: 1px 1px 8px rgba(50, 50, 50, 0.3);
		-moz-box-shadow:    1px 1px 8px rgba(50, 50, 50, 0.3);
		box-shadow:         1px 1px 8px rgba(50, 50, 50, 0.3);
	}
	#pulldown img.setting-on{
		border: #00A8e1 2px solid;
		background: #FFF;
	}
	#canvas{
		cursor: pointer;
	}
		</style>
