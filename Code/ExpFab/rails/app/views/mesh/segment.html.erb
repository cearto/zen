<script> 
//global variables

var camera, controls, projector;
var stats, WIDTH, HEIGHT, ASPECT, NEAR, FAR, VIEW_ANGLE;
var Z = 300; var zoomLevel = 0.01; var theta = 0; var phi = 0;


var xaxis = new THREE.Vector3(1, 0, 0);
var yaxis = new THREE.Vector3(0, 1, 0);
var zaxis = new THREE.Vector3(0, 0, 1);

// MOUSE EVENTS
var down  = new THREE.Vector3(0, 0, 0);
var up  = new THREE.Vector3(0, 0, 0);
var current  = new THREE.Vector3(0, 0, 0);
var originalAxisLength = 1;
var activeAxis = null;
var activeOperation = '';


var pca = <%= @pca %>;
var regions = <%= @seg %>;
var invRegions = invert(regions);
var operationData = <%= @operations %>;

var gui = new dat.GUI();
var scene = new THREE.Scene();
var renderer = new THREE.WebGLRenderer({ antialias: true,  preserveDrawingBuffer: true } );


var mainExpFab;
var defaultMaterialSettings = { 
      wireframe: false, 
      //ambient: 0x030303, 
      color: 0xdddddd, // gray 
      specular: 0x0000, //white
      shininess: 30, 
      shading: THREE.FlatShading, 
      vertexColors: THREE.VertexColors, 
      overdraw : true,
      transparent: true,
      opacity: 0.5
    };
//{
//   wireframe: false, 
//   ambient: 0x030303, 
//   color: 0xdddddd, 
//   specular: 0x009900, 
//   shininess: 30, 
//   shading: THREE.FlatShading, 
//   vertexColors: THREE.VertexColors, 
//   //overdraw : true,
//   transparent: true,
//   opacity: 0.1 
// };

$(function(){
	initOpenGL($('#scene'));
  $('#screenshot').click(function(){
    mainExpFab.mgui.generateImage();
  });
  $('#fullscreen').click(function(){
    var gal = mainExpFab.mgui.gallery.wrapper;
    if(gal.hasClass('gallery-sidebar')){
      gal.removeClass('gallery-sidebar').addClass('gallery-fullscreen');
      $(this).html('Sidebar');
    }
    else{
      mainExpFab.mgui.gallery.wrapper.removeClass('gallery-fullscreen').addClass('gallery-sidebar');
      $(this).html('Fullscreen');
    }

  });
	// TODO: Add "Unable to load error"
});	

function ExpFab(obj, regions, pca, filepath){
  var filesplit = filepath.split('/');
  this.filename = filesplit[filesplit.length-1].split('.stl')[0]; 
  //scene variables
	this.object = obj;
  this.color = defaultMaterialSettings.color;
  this.wireframe = defaultMaterialSettings.wireframe;
  this.shininess = defaultMaterialSettings.shininess;
	
  // deformation variables
  this.operation = 'None';


	this.original = obj.geometry.clone().vertices;
  this.current = obj.geometry.clone().vertices;
	
	this.regions = [];
	for(var i in regions) this.regions.push(new Region(this, i, regions[i], pca[i]));
	
	this.id = scene.userData.objects.length;
  this.mgui = new MeshGUI();
}
ExpFab.prototype.load = function(fileinfo) {
  var that = this;
  
  var fileControl = gui.add(mainExpFab, 'filename');
  var wireframeControl = gui.add(mainExpFab, 'wireframe');
	var colorControl = gui.addColor(mainExpFab, 'color');
  //var shininessControl = gui.add(mainExpFab, 'shininess');
  
  var operationControl = gui.add(mainExpFab, 'operation', ['None', 'Balloon', 'Translate']);


  wireframeControl.onChange(function(value) {
    that.object.material.wireframe = value;
    render();
  });
  // shininessControl.onChange(function(value) {
  //   that.object.material.shininess = value;
  //   render();
  // });  
  colorControl.onChange(function(value) {
    // cl(decimalToHexString(value));
    var nColor  =  decimalToHexString(value);
    if(nColor[0] != "#") nColor = "#" + nColor;
    that.object.material.color = new THREE.Color(nColor);
    render();
  });

  operationControl.onChange(function(value){
    //TODO change name
    if(value == 'Translate') value = 'Scale';
    activeOperation = value; 

    
    $(".op[name='"+ value +"x']").click();
    $(".op[name='"+ value +"y']").click();
    $(".op[name='"+ value +"z']").click();
   
  });

 

	GUIActivateListeners();
  
  GUIStreams();
  GUIOperations();
  GUIFile(fileinfo);
  GUIRegions(mainExpFab);
  loadDataStreams($('#streams'));
  animate();
  $("#nav").hide();

  mainExpFab.mgui.displayUIMessage("Model successfully loaded. ", fileinfo['name'], true);     
};

function userRay(event){
	var c = $(renderer.domElement);
	var vector  = toCanvasCoord(event).setZ(0.5);
	projector.unprojectVector( vector, camera );
	return new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize());
}

function onDocumentOver(event){
	event.preventDefault();
	controls.enabled = !(event.metaKey);
    if(!(event.altKey || event.metaKey)) return;
   
    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	if(activeAxis != null){
	  	current = toCanvasCoord(event);
	  	var regid = selectedRegions2(mainExpFab)[0];
	  	var origin = mainExpFab.regions[regid].centroid.clone();
	  	var displacement = current.clone().subVectors(current, origin);
	  	var originaldisplacement = down.clone().subVectors(down, origin);
  		var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
  		activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));
  		var scale = (displacement.length() - originaldisplacement.length());
  		cl("S:" + (scale * 5));

  		$(".op-slider[name='"+ currentOperation +"']").val(larger * scale * (1/displacement.length()) * 5).change();
  	}
  	if(axesintersects.length > 0){
  		render();
  		return;
  	}

    if (intersects.length > 0 ) {
    	
    	var regid = invRegions[intersects[0].faceIndex];
        gui = $('.region[data-r="'+ regid +'"]').mouseenter();
        $('.region').not(gui).mouseleave();
     }
	else	
        gui = $('.region').mouseleave();
	
	render();
	
}
function onDocumentMouseClick(event) {
	event.preventDefault();
	
	if(!(event.altKey || event.metaKey)) return;

	var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	if(axesintersects.length > 0){
  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    var regid = invRegions[intersects[0].faceIndex];
	    gui = $('.region[data-r="'+ regid +'"]').click();
		render();
	}
}


function onDocumentMouseDown(event) {
    event.preventDefault();
    if(!(event.altKey || event.metaKey)) return;

    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);

  	if(axesintersects.length > 0){
  		var regid = selectedRegions2(mainExpFab)[0];
  		var pcaid = parseInt(axesintersects[0].object.name);
  		var activeRegion = mainExpFab.regions[regid];
  		activeAxis = activeRegion.pca_lines[pcaid];
  		activeDataStream = datastreams[0];
  		activeDataStream.saveState();

  		if(pcaid == 0)
  			currentOperation = activeOperation + 'x';
  		else if(pcaid == 1)
  			currentOperation = activeOperation + 'y';
  		else if(pcaid == 2)
  			currentOperation = activeOperation + 'z';


  		activeAxis.click();
  		
  		down = toCanvasCoord(event);

  		
  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    
	}
}
function onDocumentMouseUp(event) {
    event.preventDefault();
    if(!(event.altKey || event.metaKey)) return;

    var ray = userRay(event);
    var all = scene.children;
	cones  = [], objects = [];

    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.ArrowHelper) cones.push(all[i].cone); 
    for(var i in all) if(all[i] !== undefined && all[i] instanceof THREE.Mesh) objects.push(all[i]);

    var intersects = ray.intersectObjects(objects);
  	var axesintersects = ray.intersectObjects(cones);
  	
  	
	up = toCanvasCoord(event);
  		  	current = toCanvasCoord(event);
	  	var regid = selectedRegions2(mainExpFab)[0];
	  	var origin = mainExpFab.regions[regid].centroid.clone();
	  	var displacement = current.clone().subVectors(current, origin);
	  	var originaldisplacement = down.clone().subVectors(down, origin);
  		var larger = displacement.signTo(yaxis) > 0 == originaldisplacement.signTo(yaxis) > 0 ? 1 : -1;
  		activeAxis.setLength( (larger * displacement.length() * (1/ originaldisplacement.length()) ));
  		down = up;
  	activeAxis = null;
  	if(axesintersects.length > 0){
  		var regid = selectedRegions2(mainExpFab)[0];
  		var pcaid = parseInt(axesintersects[0].object.name);
  		mainExpFab.regions[regid].pca_lines[pcaid].click();

  		render();
  		return;
  	}
  	if ( intersects.length > 0 ) {
	    
	}
}	
</script>

<div class="pure-g-r content" id="layout">
    <div class="pure-u" id="nav"></div>

    <div class="pure-u-1" id="main">
        <div class="mesh-content">
            <div id="info-bar" class="mesh-content-header pure-g">
                <div class="pure-u-1-2">
                    <h1 class="mesh-content-title">Sphere</h1>
                    <p class="mesh-content-subtitle">
                        From <a>Cesar Torres</a> at <span>3:56pm, April 3, 2012</span>
                    </p>
                </div>

                <div class="pure-u-1-2 mesh-content-controls">
                    <!-- <button id='save' class="pure-button secondary-button">Save</button> -->
                    <button id='revert' class="pure-button secondary-button">Revert</button>
                    <button class="pure-button secondary-button" id='print'>Print</button>
                </div>
            </div>
            <div id='gallery-wrapper' class='gallery-sidebar'>
              <div id='gallery' ></div>
              
              <div id='gallery-controls'>
                <button id='screenshot'>Screenshot</button>
                <button id='fullscreen'>Fullscreen</button>
                <button id='save'>Export STL</button>
              </div>
            </div>
            <div id="scene" class="mesh-content-body">

            </div>
        </div>
    </div>
</div>
 <span id="pulldown"> <%= image_tag '/icons/gear.png', :class => "shadow"%> </span>
<div id="error" class='shadow'> 
  
  <h2> We encountered an error. </h2>
  <span id='error-msg'> Error message goes here. </span>
  <span class='x'>x</span> 
</span>