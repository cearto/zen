<script>
  var components = {};


  function addElement(intersect){
    /* Get normal of intersected object */
    normalMatrix.getNormalMatrix( intersect.object.matrixWorld );
    var normal = intersect.face.normal.clone();
    normal.applyMatrix3( normalMatrix ).normalize();

    /* Get position, make a new Voxel */

    var position = new THREE.Vector3().addVectors( intersect.point, normal );
    var geometry = new THREE.CubeGeometry( 50, 50, 50 );
    var voxel = new Voxel(position, geometry, intersect);
    voxel.mesh.name = "Cube " + Object.size(components);
    addToComponentList(voxel);
    scene.add( voxel.mesh );
    console.log(intersect.object);
  }

  function Voxel(position, geometry, intersect){
    this.geometry = geometry;
    this.position = position;
    this.variables = ['width', 'height', 'depth'];
    
    this.attachedTo = [intersect.object.name]
    /* Color faces */
    for ( var i = 0; i < geometry.faces.length; i ++ )
      geometry.faces[ i ].color.setHex( 0x00A8e1 );
    /* Apply matte material */
    var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.FaceColors } );

    this.mesh = new THREE.Mesh( geometry, material );
    
    /* Snap to grid */ 
  
    this.mesh.position.x = Math.floor( position.x / 50 ) * 50 + 25;
    this.mesh.position.y = Math.floor( position.y / 50 ) * 50 + 25;
    this.mesh.position.z = Math.floor( position.z / 50 ) * 50 + 25;
    this.mesh.matrixAutoUpdate = false;
    this.mesh.updateMatrix();
  
  }
  function addToComponentList(voxel){
    
    // Data Structure
    var name = 'Cube ' + (Object.size(components) + 1);
    components[name] = voxel;
    voxel.geometry.name = name;

    // GUI
    var comp = $('<div class="input-group input-group-sm"><span class="input-group-addon"><%= image_tag "voxel2.png"%></span> <input type="text" class="form-control" placeholder="'+ name +'"></div>').attr('name', name)
     .click(function(){
        $('#feature-list table').html('');
        var vx = components[$(this).attr('name')];
        for(var i in vx.variables)
          makeFeatureRow(vx.variables[i]);

        // makeFeatureRow('Width');
        // makeFeatureRow('Height');
        // makeFeatureRow('Depth');
      });
    
    $('#component-list').append(comp);
      
  }
  $(function(){
    $('#fullscreen').click(function(){
      $(this).toggleClass('fullscreen');
      $("canvas").toggleClass('fullscreen');
      canvas = document.getElementsByTagName("canvas")[0];
      canvas.width = document.body.clientWidth; //document.width is obsolete
      canvas.height = document.body.clientHeight; //document.height is obsolete
      canvasW = canvas.width;
      canvasH = canvas.height;

      //onWindowResize();
    });
    $('#clear-all').click(clearAll);
  });
  function clearAll(){
    for(var i in components)
        scene.remove(components[i].mesh);
      components = {};
      $('#component-list').html('');
  }

  function makeDropDownBtn(choices, def){
    var feature = $('<td> </td>');
    var group = $('<div></div>').addClass("btn-group btn-xs");
    var btn = $('<button/>').attr('type', 'button')
                         .attr('data-toggle', 'dropdown')
                         .addClass('btn btn-xs btn-default dropdown-toggle')
                         .html(choices[def] + '<span class="caret"></span>');
    group.append(btn);
    var dropdown = $('<ul class="dropdown-menu"></ul>');
      for(var i in choices){
        var choice = $('<li><a href="#"> '+ choices[i] +'</a></li>');
        dropdown.append(choice);
      }
      group.append(dropdown);
      feature.append(group);
      return feature;
  }
  domainChoices = ['Continuous', 'Discrete', 'List'];
  
  function makeFeatureRow(name){
    var row = $('<tr></tr>');
    var name = $('<td></td>').html(name);
    var domain = makeDropDownBtn(domainChoices, 0);
    var dist = makeDropDownBtn(distChoices, 0);
    row.append(name).append(domain).append(dist);
    $('#feature-list').append(row);
  }




</script>

<div class="navbar">
  <a href="#" class="navbar-brand">AuraGML</a>
<!-- Single button -->
  <div class="btn-group pull-left">
      <button type="button" class="btn btn-default navbar-btn"><%= image_tag 'voxel2.png'%></button>
      <button type="button" class="btn btn-default navbar-btn dropdown-toggle" data-toggle="dropdown">
        <span class="caret"></span>
      </button>
      <ul class="dropdown-menu">
        <li><a href="#"><%= image_tag 'cylinder.png'%> Cylinder </a></li>
        <li><a href="#">Save as STL</a></li>
        <li class="divider"></li>
        <li><a href="#">Save as JSGML</a></li>
      </ul>
  </div>

  <div class="btn-group pull-right">
    <button type="button" class="btn btn-default navbar-btn">Save</button>
      <button type="button" class="btn btn-default navbar-btn dropdown-toggle" data-toggle="dropdown">
        <span class="caret"></span>
      </button>
  	 <button type="button" class="btn btn-default navbar-btn"> Library </button>
     <button id='fullscreen' type="button" class="btn btn-default navbar-btn"><%= image_tag 'fullscreen.png'%></button>
  	  
  	  <ul class="dropdown-menu">
  	    <li><a href="#">Save as PNG</a></li>
  	    <li><a href="#">Save as STL</a></li>
  	    <li class="divider"></li>
  	    <li><a href="#">Save as JSGML</a></li>
  	  </ul>
  	</div>
  </div>


  <div id='viewport' class="panel">
  <div class="tabbable"> <!-- Only required for left/right tabs -->
    <ul class="nav nav-tabs">
      <li class="active"><a href="#tab1" data-toggle="tab"> Viewport </a></li>
      <li><a href="#tab2" data-toggle="tab"> Model </a></li>
    </ul>
    <div class="tab-content">
      <div id='viewport-panel' class="tab-pane active" id="tab1">
      </div>
      <div class="tab-pane" id="tab2">
         <div class="well">  <p> JS </p> </div>
      </div>
    </div>
  </div>
  </div> 
  <div id='sidepanel' class="panel">
    <div class="panel-heading"> Component Features 
       <div class="btn-group pull-right">
      <button id='clear-all' type="button" class="btn btn-default btn-xs"> Clear All </button>
   </div>
   </div>
   <div id='component-list'><h5> Compnents </h5> </div>
   <div id='attachment-list'><h5> Attachments </h5> </div>

   <hr class='divider'>   
   <div id='feature-list'>  
    <h5> Features </h5>
      <table>
        <tr>
          <th> Name </th>
          <th> Domain </th>
          <th> Distribution </th>
        </tr>
        
      </table>
    </div>
   </div>
  </div>

    

<script>

  var container, stats;
  var camera, scene, renderer;
  var projector, plane;
  var mouse2D, mouse3D, raycaster, theta = 45,
  isShiftDown = false, isCtrlDown = false,
  target = new THREE.Vector3( 0, 200, 0 );
  var normalMatrix = new THREE.Matrix3();
  var ROLLOVERED;

  init();
  animate();

  function init() {

    container = document.createElement( 'div' );
    $('#viewport-panel').append( container ).css('position', 'relative');

    var info = document.createElement( 'div' );
    info.style.position = 'absolute';
    info.style.top = '0px';
    info.style.width = '100%';
    info.style.textAlign = 'center';

    info.innerHTML = '<strong>control + click</strong>: remove voxel, <strong>shift</strong>: rotate, <a href="javascript:save();return false;">save .png</a>';
    container.appendChild( info );

    camera = new THREE.PerspectiveCamera( 40, $('#viewport-panel').width() /$('#viewport-panel').height() , 1, 10000 );
    camera.position.y = 800;

    scene = new THREE.Scene();

    // Grid

    var size = 500, step = 50;

    var geometry = new THREE.Geometry();

    for ( var i = - size; i <= size; i += step ) {

      geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
      geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );

      geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
      geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );

    }

    var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.2 } );

    var line = new THREE.Line( geometry, material );
    line.type = THREE.LinePieces;
    scene.add( line );

    //

    projector = new THREE.Projector();

    plane = new THREE.Mesh( new THREE.PlaneGeometry( 1000, 1000 ), new THREE.MeshBasicMaterial() );
    plane.rotation.x = - Math.PI / 2;
    plane.visible = false;
    scene.add( plane );

    mouse2D = new THREE.Vector3( 0, 10000, 0.5 );

    // Lights

    var ambientLight = new THREE.AmbientLight( 0x606060 );
    scene.add( ambientLight );

    var directionalLight = new THREE.DirectionalLight( 0xffffff );
    directionalLight.position.x = Math.random() - 0.5;
    directionalLight.position.y = Math.random() - 0.5;
    directionalLight.position.z = Math.random() - 0.5;
    directionalLight.position.normalize();
    scene.add( directionalLight );

    var directionalLight = new THREE.DirectionalLight( 0x808080 );
    directionalLight.position.x = Math.random() - 0.5;
    directionalLight.position.y = Math.random() - 0.5;
    directionalLight.position.z = Math.random() - 0.5;
    directionalLight.position.normalize();
    scene.add( directionalLight );

    renderer = new THREE.CanvasRenderer();
    renderer.setSize( $('#viewport-panel').width(), $('#viewport-panel').height() );

    container.appendChild(renderer.domElement);

    //stats = new Stats();
    //stats.domElement.style.position = 'relative';
    //stats.domElement.style.top = '0px';
    //container.appendChild( stats.domElement );

    document.addEventListener( 'mousemove', onDocumentMouseMove, false );
    document.addEventListener( 'mousedown', onDocumentMouseDown, false );
    document.addEventListener( 'keydown', onDocumentKeyDown, false );
    document.addEventListener( 'keyup', onDocumentKeyUp, false );

    //

    window.addEventListener( 'resize', onWindowResize, false );

  }

  function onWindowResize() {

    camera.aspect = $('#viewport-panel').width()/ $('#viewport-panel').height();
    camera.updateProjectionMatrix();

    renderer.setSize( $('#viewport-panel').width(), $('#viewport-panel').height() );

  }

  function onDocumentMouseMove( event ) {
    var offset = $('canvas').offset();
    event.preventDefault();

    // Coordinates are float-optimized with origin at the center of the canvas
    mouse2D.x = ((event.clientX - offset.left) / $('#viewport-panel').width()) * 2 - 1 ;//
    mouse2D.y = -((event.clientY - offset.top) / $('#viewport-panel').height()) * 2 + 1 ;
    
    
    var intersects = raycaster.intersectObjects( scene.children );

    if ( intersects.length > 0 ) {

      if ( ROLLOVERED ) ROLLOVERED.color.setHex( 0x00b8c1 );

      ROLLOVERED = intersects[ 0 ].face;
      ROLLOVERED.color.setHex( 0x00A8e1 )

    }

  }

  function removeElement(intersect){
    if ( intersect.object != plane )
      scene.remove( intersect.object );
  }

  

  var distChoices = ['<%= image_tag "uniform.png", :class => "dist"%> Uniform','<%= image_tag "normal.png", :class => "dist"%> Normal'];


  function onDocumentMouseDown( event ) {

    //event.preventDefault();
    //event.stopPropagation();
    var intersects = raycaster.intersectObjects( scene.children );

    /* Checks if ray hits an object in the scene */
    if ( intersects.length > 0 ) {
      var intersect = intersects[ 0 ];
      if ( isCtrlDown ) removeElement(intersect);         
      else addElement(intersect);
    }
  }

  function onDocumentKeyDown( event ) {

    switch( event.keyCode ) {

      case 16: isShiftDown = true; break;
      case 17: isCtrlDown = true; break;

    }

  }

  function onDocumentKeyUp( event ) {

    switch( event.keyCode ) {

      case 16: isShiftDown = false; break;
      case 17: isCtrlDown = false; break;

    }
  }

  function save() {

    window.open( renderer.domElement.toDataURL('image/png'), 'mywindow' );

  }

  //

  function animate() {

    requestAnimationFrame( animate );

    render();
    //stats.update();

  }

  function render() {

    if ( isShiftDown ) {

      theta += mouse2D.x * 3;

    }

    camera.position.x = 1400 * Math.sin( theta * Math.PI / 360 );
    camera.position.z = 1400 * Math.cos( theta * Math.PI / 360 );
    camera.lookAt( target );

    raycaster = projector.pickingRay( mouse2D.clone(), camera );

    renderer.render( scene, camera );

  }

</script>


